[ 02.리액트 컴포넌트에서 데이터전달하기 ]
->>> 프롭스 다운! 프롭스 펑션 업 다운!!

- 일반적으로 리액트에서 데이터는 하위 컴포넌트로
props를 통하여 전달한다! 

-> 일반적인 함수는 바깥쪽에 선언하면 전역변수, 함수내부는
지역변수로 사용했으나 컴포넌트는 자식 컴포넌트가 부모컴포넌트의
변수,함수 등을 직접 호출할 수 없다!

1. 부모 컴포넌트 -> 자식 컴포넌트로 값전달
->>> Props Down!!! -> 속성을 통하여 값을 전달한다!!!

<컴포넌트명 속성명=값 />

2. 자식 컴포넌트 -> 부모 컴포넌트 값전달(함수호출!)

->>> Props Function Up & Down -> 함수를 내려보내고 호출받음!

<컴포넌트명 속성명={부모함수명} />
-> 자식컴포넌트에서 속성으로 보낸 부모함수를 호출할 수 있다!
이때 부모함수가 값을 받게하면 값도 전달된다!!!

3. 형제 컴포넌트는 서로 값을 어떻게 전달하나?
자식-> 부모 -> 다른자식

(위의 useState / useEffect / useContext 는 기본 Hooks라고 부른다!)
참고:
https://ko.legacy.reactjs.org/docs/hooks-reference.html

☑️ React - 메모이제이션(Memoization) : 추가 Hooks

🍓 React에서 메모이제이션을 하는 방법

[1. useMemo]
[2. React.memo]
[3. useCallback]

🍓 메모이제이션(Memoization)
메모이제이션은 컴퓨터가 동일한 계산을 반복해야 할 때, 
이전에 계산한 값을 메모리에 저장함으로서 중복계산을 피하여
데이터 속도를 높이는 기술.보통 애플리케이션의 최적화를 위해 사용

1. useMemo -----------------------------------
useMemo를 사용하면 함수 컴포넌트 내부에서 발생하는 
연산을 최적화할 수 있음. 이전 값을 기억해두었다고 
조건에 따라 재활용하여 성능을 최적화 하는 용도로 사용
메모이제이션된 값을 return하는 후크다!
+++++++++++++++++++++++++++++++++++++++++++++++++
const 변수 = useMemo(() => {}, [관리변수]);
관리변수 값이 변경되면 메모이제이션의 함수를 재실행함.
만약 인자를 전달하지 않는다면 매번 새롭게 계산하여 return함
___________________________________________________________

2. React.memo ------------------------------------
함수 컴포넌트에서는 일반적으로 라이프 사이클을 사용할 수 없음 
그래서 React.memo라는 함수를 사용함. 
컴포넌트의 props의 전달값이 변경돼야만 랜더링변경함
설정하여 함수 컴포넌트의 리렌더링 성능을 최적화함
(주의: 함수를 전달할 경우 매번 새로운값으로 인식함!)
+++++++++++++++++++++++++++++++++++++++++++++++
const Component = React.memo((props) => {
   return (컴포넌트 랜더링 코드)}
);
이전과 같은 props 값이 들어올 때는 렌더링 과정을 스킵
가장 최근에 렌더링된 결과를 재사용함 -> 이것이 메모이제이션임! 재사용!!!
단, 컴포넌트 내부에서 useState 훜 사용시 상태가 변경 되면 리렌더링됨
_______________________________________________________________

3. useCallback -------------------------------------
useCallback을 사용하면 만들어 놨던 함수를 재사용할 수 있음
컴포넌트가 렌더링 될 때마다 내부적으로 사용된 함수가 새롭게 
생성되는 경우, 이미 사용된 같은 함수를 메모이제이션 하여 재사용함!
++++++++++++++++++++++++++++++++++++++++++++++++++++++
const [의존성변수, set의존성변수] = useState(초기값);
const 콜백 = useCallback(() => {}, 
[의존성변수]);

(주의: 콜백을 호출하는 코드가 재상용되는 메모이제이션처리 돼야 
콜백 호출이 부분 업데이트가 된다! 즉, 재상용되는 메모이제이션 처리된다!)

